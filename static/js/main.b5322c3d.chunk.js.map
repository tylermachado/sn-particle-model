{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","changeActive","bind","state","type","text","x","console","log","toString","toLowerCase","findActive","data","filter","d","this","setState","active","substance","particlesrendered","particles","map","p","className","particle","split","join","onMouseOver","subtypes","subt","symbol","name","antiparticles","onClick","changeMode","dangerouslySetInnerHTML","__html","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ojMAiGeA,E,kDA1Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACX,OAAU,CACRC,KAAM,GACNC,KAAM,IAER,UAAa,UARE,E,gDAYnB,SAAaC,GACXC,QAAQC,IAAIF,EAAEG,WAAWC,eACzB,IAAIC,EAAaC,EAAaC,QAAO,SAAAC,GAAC,OAAKA,EAAEV,KAAKK,WAAWC,gBAAkBJ,EAAEG,WAAWC,iBAAgB,GAC5GK,KAAKC,SAAS,CACZC,OAAQN,M,wBAIZ,WAC+B,WAAzBI,KAAKZ,MAAMe,UACbH,KAAKC,SAAS,CACZE,UAAW,aACXD,OAAQ,CACNb,KAAM,aACNC,KAAM,+uBAIVU,KAAKC,SAAS,CACZE,UAAW,SACXD,OAAQ,CACNb,KAAM,GACNC,KAAM,Q,oBAMd,WAAU,IACJc,EADG,OA2BP,OAxBEA,EAD2B,WAAzBJ,KAAKZ,MAAMe,UACOE,EAAkBC,KAAI,SAAAC,GAAC,OACvC,yBAASC,UAAW,QAAUD,EAAEE,SAASC,MAAM,KAAKC,KAAK,KAAO,QAASC,YAAa,kBAAM,EAAK1B,aAAaqB,EAAEE,WAAhH,SACGF,EAAEM,SAASP,KAAI,SAAAQ,GAAI,OAClB,sBAAKN,UAAU,WAAf,UACE,qBAAKA,UAAU,SAAf,SAAyBM,EAAKC,SAC9B,qBAAKP,UAAU,OAAf,SAAuBM,EAAKE,kBAOlBC,EAAsBX,KAAI,SAAAC,GAAC,OAC3C,yBAASC,UAAW,QAAUD,EAAEE,SAASC,MAAM,KAAKC,KAAK,KAAO,QAAhE,SACGJ,EAAEM,SAASP,KAAI,SAAAQ,GAAI,OAClB,sBAAKN,UAAU,WAAf,UACE,qBAAKA,UAAU,SAAf,SAAwB,sBAAMA,UAAU,cAAhB,SAA+BM,EAAKC,WAC5D,qBAAKP,UAAU,OAAf,SAAuBM,EAAKE,kBAQtC,qBAAKR,UAAU,MAAf,SAEE,sBAAKA,UAAW,uBAAyBR,KAAKZ,MAAMe,UAApD,UACGC,EACD,0BAASI,UAAU,aAAaU,QAAS,kBAAM,EAAKC,cAApD,UACE,qBAAKX,UAAoC,WAAzBR,KAAKZ,MAAMe,UAAyB,yBAA2B,kBAA/E,oBACA,qBAAKK,UAAoC,eAAzBR,KAAKZ,MAAMe,UAA6B,yBAA2B,kBAAnF,2BAEF,0BAASK,UAAU,4BAA4BI,YAAa,kBAAM,EAAK1B,aAAa,gBAApF,UACE,qBAAKsB,UAAU,SAAf,eACA,qBAAKA,UAAU,OAAf,4BAEF,0BAASA,UAAU,UAAnB,UACE,6BAAKR,KAAKZ,MAAMc,OAAOb,OACvB,mBAAG+B,wBAA0B,CAAEC,OAAQrB,KAAKZ,MAAMc,OAAOZ,oB,GAnFnDgC,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b5322c3d.chunk.js","sourcesContent":["import './App.scss';\nimport React, { Component } from 'react'\nimport * as data from './data/text.json';\nimport * as particles from './data/particles.json';\nimport * as antiparticles from './data/antiparticles.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.changeActive = this.changeActive.bind(this);\n    this.state = { \n      \"active\": {\n        type: \"\",\n        text: \"\"\n      },\n      \"substance\": \"matter\"\n    };\n  }\n\n  changeActive(x) {\n    console.log(x.toString().toLowerCase())\n    let findActive = data.default.filter(d => (d.type.toString().toLowerCase() === x.toString().toLowerCase()))[0];\n    this.setState({\n      active: findActive\n    })\n  }\n\n  changeMode() {\n    if (this.state.substance === \"matter\") {\n      this.setState({\n        substance: \"antimatter\",\n        active: {\n          type: \"Antimatter\",\n          text: \"Each type of matter particle has an antimatter partner. Antiparticles have the opposite electric charge, but are otherwise identical to their alter-egos. Physicists are still <a href='https://www.sciencenews.org/article/mounting-evidence-suggests-neutrinos-are-key-why-antimatter-is-rare'>trying to understand</a> why matter is more prevalent than antimatter. For example, negatively charged electrons are much more prevalent in our cosmos than their positively-charged antiparticle, positrons. Because neutrinos have no electric charge, scientists are puzzling over whether neutrinos and antineutrinos are <a href='https://www.sciencenews.org/article/quest-identify-nature-neutrinos-alter-ego-heating'>distinct particles</a>, or the same thing.\"\n        }\n      })\n    } else {\n      this.setState({\n        substance: \"matter\",\n        active: {\n          type: \"\",\n          text: \"\"\n        }\n      })\n    }\n  }\n\n  render() {\n    let particlesrendered;\n    if (this.state.substance === \"matter\") {\n      particlesrendered = particles.default.map(p => (\n          <section className={\"area-\" + p.particle.split(' ').join('-') + \" zone\"} onMouseOver={() => this.changeActive(p.particle)}>\n            {p.subtypes.map(subt => (\n              <div className=\"particle\">\n                <div className=\"symbol\">{subt.symbol}</div>\n                <div className=\"name\">{subt.name}</div>\n              </div>\n            ))}\n          </section>\n        ))\n      \n    } else {\n      particlesrendered = antiparticles.default.map(p => (\n          <section className={\"area-\" + p.particle.split(' ').join('-') + \" zone\"}>\n            {p.subtypes.map(subt => (\n              <div className=\"particle\">\n                <div className=\"symbol\"><span className=\"symbol-text\">{subt.symbol}</span></div>\n                <div className=\"name\">{subt.name}</div>\n              </div>\n            ))}\n          </section>\n        ))\n      \n    }\n    return (\n      <div className=\"App\">\n        \n        <div className={\"grid-container mode-\" + this.state.substance}>\n          {particlesrendered}\n          <section className=\"controller\" onClick={() => this.changeMode()}>\n            <div className={this.state.substance === \"matter\" ? 'controller-item active' : 'controller-item'}>matter</div>\n            <div className={this.state.substance === \"antimatter\" ? 'controller-item active' : 'controller-item'}>antimatter</div>\n          </section>\n          <section className=\"area-higgs-boson particle\" onMouseOver={() => this.changeActive(\"higgs boson\")}>\n            <div className=\"symbol\">H</div>\n            <div className=\"name\">Higgs Boson</div>\n          </section>\n          <section className=\"infobox\">\n            <h3>{this.state.active.type}</h3>\n            <p dangerouslySetInnerHTML={ { __html: this.state.active.text} }></p>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}